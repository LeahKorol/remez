sequenceDiagram
    title REMEZ Authentication - Part 2: Login & Google OAuth
    
    participant User as 👤 User
    participant Frontend as 🖥️ Frontend<br/>(React)
    participant Backend as 🔧 Backend API<br/>(Django)
    participant Google as 🔐 Google OAuth
    participant DB as 💾 Database<br/>(PostgreSQL)

    %% ==========================================
    %% Login Flow (Email/Password)
    %% ==========================================
    
    rect rgb(255, 245, 230)
        Note over User,DB: Login Flow (Email/Password)
        
        User->>Frontend: Enter credentials<br/>(Email and password)
        Frontend->>Frontend: Client-side validation
        
        Frontend->>Backend: POST /api/v1/auth/login/<br/>{email, password}
        Backend->>Backend: Authenticate user
        Backend->>DB: Query User by email
        DB-->>Backend: User data
        
        alt Authentication successful
            Backend->>Backend: Generate JWT tokens
            Backend-->>Frontend: Login success + tokens<br/>{access, refresh, user_id}
            
            Frontend->>Frontend: Store tokens in localStorage
            Frontend->>Frontend: Update user context
            Frontend-->>User: Show success message
            Frontend->>Frontend: Navigate to profile page
        else Authentication failed
            Backend-->>Frontend: Authentication error
            Frontend-->>User: Show error message
        end
    end

    %% ==========================================
    %% Google OAuth Login Flow
    %% ==========================================
    
    rect rgb(245, 230, 255)
        Note over User,DB: Google OAuth Login Flow
        
        User->>Frontend: Click "Login with Google"
        Frontend->>Frontend: Load Google API script
        Frontend->>Google: Initialize OAuth popup
        
        Google->>User: Show Google login dialog
        User->>Google: Enter Google credentials
        Google->>Google: Authenticate user
        Google-->>Frontend: Return access token
        
        Frontend->>Google: GET /oauth2/v2/userinfo
        Google-->>Frontend: User profile data<br/>{id, email, name, picture}
        
        Frontend->>Backend: POST /api/v1/auth/google/login/<br/>{google_id, email, name, picture}
        Backend->>DB: Query User by google_id or email
        DB-->>Backend: User data
        
        alt User exists
            Backend->>Backend: Link Google account if needed
            Backend->>Backend: Generate JWT tokens
            Backend-->>Frontend: Login success + tokens<br/>{access, refresh, user}
            
            Frontend->>Frontend: Store tokens in localStorage
            Frontend->>Frontend: Update user context
            Frontend-->>User: Show success message
            Frontend->>Frontend: Navigate to profile page
        else User not found
            Backend-->>Frontend: User not found error
            Frontend-->>User: Show "Please register first"
        end
    end

    %% ==========================================
    %% Google OAuth Registration Flow
    %% ==========================================
    
    rect rgb(255, 230, 245)
        Note over User,DB: Google OAuth Registration
        
        User->>Frontend: Click "Register with Google"
        Frontend->>Google: Initialize OAuth popup
        Google->>User: Show Google login dialog
        User->>Google: Enter credentials
        Google-->>Frontend: Return access token
        
        Frontend->>Google: GET /oauth2/v2/userinfo
        Google-->>Frontend: User profile data
        
        Frontend->>Backend: POST /api/v1/auth/google/register/<br/>{google_id, email, name, picture}
        Backend->>DB: Check if user exists
        DB-->>Backend: User existence status
        
        alt User already exists
            Backend-->>Frontend: Conflict error
            Frontend-->>User: Show "Account exists"
        else User available
            Backend->>DB: Create new User with Google ID
            DB-->>Backend: User created
            Backend->>DB: Mark email as verified
            Backend->>Backend: Generate JWT tokens
            Backend-->>Frontend: Registration success + tokens
            
            Frontend->>Frontend: Store tokens in localStorage
            Frontend->>Frontend: Update user context
            Frontend-->>User: Show success message
            Frontend->>Frontend: Navigate to profile page
        end
    end