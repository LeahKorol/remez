sequenceDiagram
    title REMEZ Authentication - Part 3: Token & Password Management
    
    participant User as 👤 User
    participant Frontend as 🖥️ Frontend<br/>(React)
    participant Backend as 🔧 Backend API<br/>(Django)
    participant DB as 💾 Database<br/>(PostgreSQL)
    participant Email as 📧 Email Service

    %% ==========================================
    %% Token Refresh Flow
    %% ==========================================
    
    rect rgb(230, 255, 245)
        Note over User,Email: Token Refresh Flow
        
        Frontend->>Backend: API request with expired token
        Backend->>Backend: Validate JWT token
        Backend-->>Frontend: 401 Unauthorized
        
        Frontend->>Frontend: Check for refresh token
        Frontend->>Backend: POST /api/v1/auth/token/refresh/<br/>{refresh: refresh_token}
        Backend->>Backend: Validate refresh token
        Backend->>Backend: Generate new access token
        
        alt Refresh successful
            Backend-->>Frontend: New access token
            Frontend->>Frontend: Update stored token
            Frontend->>Backend: Retry original request
            Backend-->>Frontend: Original request response
        else Refresh failed
            Backend-->>Frontend: Refresh token invalid
            Frontend->>Frontend: Clear all tokens
            Frontend->>Frontend: Redirect to login page
        end
    end

    %% ==========================================
    %% Password Reset Flow
    %% ==========================================
    
    rect rgb(255, 240, 230)
        Note over User,Email: Password Reset Flow
        
        User->>Frontend: Click "Forgot Password"
        Frontend-->>User: Show password reset form
        User->>Frontend: Enter email address
        
        Frontend->>Backend: POST /api/v1/auth/password/reset/<br/>{email}
        Backend->>DB: Find user by email
        DB-->>Backend: User data
        
        alt User exists
            Backend->>Email: Send password reset email
            Backend-->>Frontend: Reset email sent
            Frontend-->>User: Show "Check your email"
            
            User->>Email: Click reset link
            Email->>Backend: GET /reset-password/{uidb64}/{token}/
            Backend->>Backend: Validate reset token
            Backend-->>Frontend: Redirect to reset form
            
            User->>Frontend: Enter new password
            Frontend->>Backend: POST /api/v1/auth/password/reset/confirm/<br/>{uid, token, new_password1, new_password2}
            Backend->>Backend: Validate reset data
            Backend->>DB: Update user password
            Backend-->>Frontend: Password reset success
            Frontend-->>User: Show success & redirect to login
        else User not found
            Backend-->>Frontend: User not found
            Frontend-->>User: Show "Email not found"
        end
    end

    %% ==========================================
    %% Logout Flow
    %% ==========================================
    
    rect rgb(240, 240, 240)
        Note over User,Email: Logout Flow
        
        User->>Frontend: Click logout
        Frontend->>Frontend: Clear localStorage tokens
        Frontend->>Frontend: Clear user context
        Frontend->>Frontend: Redirect to login page
        Frontend-->>User: Show logout confirmation
    end

    %% ==========================================
    %% Session Validation Flow
    %% ==========================================
    
    rect rgb(250, 250, 230)
        Note over User,Email: Session Validation Flow
        
        Frontend->>Frontend: Check for stored token
        
        alt Token exists
            Frontend->>Backend: GET /api/v1/auth/user/
            Backend->>Backend: Validate JWT token
            Backend->>DB: Get user data
            DB-->>Backend: User information
            
            alt Token valid
                Backend-->>Frontend: User data
                Frontend->>Frontend: Update user context
                Frontend->>Frontend: Allow access to routes
            else Token invalid
                Backend-->>Frontend: 401 Unauthorized
                Frontend->>Frontend: Clear tokens
                Frontend->>Frontend: Redirect to login
            end
        else No token
            Frontend->>Frontend: Redirect to login page
        end
    end