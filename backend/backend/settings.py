"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging.config
import os
import sys
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # DRF
    "rest_framework",
    # Auth
    "django.contrib.sites",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    # API documentation
    "drf_spectacular",
    # Enable CORS
    "corsheaders",
    # Project apps
    "users",
    "analysis",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Enable CORS, Must be placed at the top
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Third-party
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Password Reset URL Configuration
PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL = "http://localhost:3000/reset-password/"
FRONTEND_PASSWORD_RESET_URL = "http://localhost:3000/reset-password"

PASSWORD_RESET_TIMEOUT = 86400  # 1 day, in seconds

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# Supabase-specific database configuration
# Supabase provides two connection options:
# - Pooled (PgBouncer, port 6543): for regular runtime (runserver, gunicorn)
# - Direct (PostgreSQL, port 5432): for management commands (migrate, createsuperuser)
# PgBouncer does not support all PostgreSQL features needed by migrations (e.g., advisory locks)

# Define commands that require direct DB connection (bypass PgBouncer)
USE_DIRECT_DB_COMMANDS = {
    "migrate",
    "createsuperuser",
    "collectstatic",
    "loaddata",
    "shell",
    "dbshell",
    "test",  # Ensure test DB is deleted immediately after the tests run.
}
is_management_command = len(sys.argv) > 1 and sys.argv[1] in USE_DIRECT_DB_COMMANDS

# Choose settings based on command type
if is_management_command:
    # Direct connection for Django management commands
    DB_PORT = os.environ["DB_PORT_DIRECT"]
    DB_HOST = os.environ["DB_HOST_DIRECT"]
    DB_USER = os.environ["DB_USER_DIRECT"]
else:
    # Pooled connection for app runtime
    DB_PORT = os.environ["DB_PORT_POOLED"]
    DB_HOST = os.environ["DB_HOST_POOLED"]
    DB_USER = os.environ["DB_USER_POOLED"]

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": DB_USER,
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        # "OPTIONS": {"sslmode": "require"},  # Supabase requires SSL
        "CONN_MAX_AGE": (600 if not is_management_command else 0),
    }
}
if not is_management_command:
    DATABASES["default"]["pool_mode"] = "transaction"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Jerusalem"  # Show dates in Israeli local time

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Project-spesific settings

# Custom user model
AUTH_USER_MODEL = "users.User"

SITE_ID = 1

# django-allauth configurations so that dj-rest-auth uses email / password authentication
ACCOUNT_LOGIN_METHODS = {"email"}
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

REST_AUTH = {
    # Custom serializers
    "USER_DETAILS_SERIALIZER": "users.serializers.UserSerializer",
    "REGISTER_SERIALIZER": "users.serializers.CustomRegisterSerializer",
    "LOGIN_SERIALIZER": "users.serializers.CustomLoginSerializer",
    "PASSWORD_RESET_SERIALIZER": "users.serializers.CustomPasswordResetSerializer",
    # Do not need session authentication because we use JWT cookies
    "SESSION_LOGIN": False,
    # JWT configuration
    "USE_JWT": True,
    # Cookies names
    "JWT_AUTH_COOKIE": os.getenv("JWT_AUTH_COOKIE", "jwt-access"),
    "JWT_AUTH_REFRESH_COOKIE": os.getenv("JWT_AUTH_REFRESH_COOKIE", "jwt-refresh"),
    # If set to True, the cookie will only be sent over HTTPS connections
    "JWT_AUTH_SECURE": os.getenv("JWT_AUTH_SECURE", "False") == "True",
    # If set to True, refresh token will not be sent in the response body
    "JWT_AUTH_HTTPONLY": os.getenv("JWT_AUTH_HTTPONLY", "False") == "True",
    "JWT_AUTH_SAMESITE": "Lax",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        hours=int(os.getenv("ACCESS_TOKEN_LIFETIME_HOURS", 1))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(os.getenv("REFRESH_TOKEN_LIFETIME_DAYS", 7))
    ),
}

# SECURITY WARNING: keep the JWT signing key used in production secret!
SIGNING_KEY = os.getenv("SIGNING_KEY")

# CORS settings
CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "").split(",")
CORS_ALLOW_CREDENTIALS = True  # Allow using cookies for authentication

# Use SMTP server for sending emails, print to console for development
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")

# Frontend urls
PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL = os.getenv(
    "PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL"
)

################################################################################
# Logging configuration
# Pay Attention: When running in debug mode (DEBUG=True),
# there is file lock issue in Windows causes the rotating log file handler fails.
# See more here: https://stackoverflow.com/questions/26830918/django-logging-rotating-files-not-working
# To avoid this issue, start the app with 'python manage.py runserver --noreload'.
###################################################################################

ROOT_LOG_LEVEL = os.getenv("ROOT_LOG_LEVEL", "WARNING").upper()

# Ensure logs directory exists
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "color": {
            "()": "backend.logging_formatters.ColoredRelativePathFormatter",
        },
        "file": {
            "()": "backend.logging_formatters.RelativePathFormatter",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "color",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOGS_DIR / "backend.log"),
            "maxBytes": 10 * 1024 * 1024,  # 10MB
            "backupCount": 3,
            "formatter": "file",
            "encoding": "utf-8",
        },
    },
    "loggers": {
        "FAERS": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": ROOT_LOG_LEVEL,
    },
}

logging.config.dictConfig(LOGGING)

# Num of quarters of demo data to use for the analysis pipeline
# defaults is -1 , i.e. use real data
# For testing, use a number between 0 and 4
NUM_DEMO_QUARTERS = int(os.getenv("NUM_DEMO_QUARTERS", -1))

# Email verification settings
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 0.0005  # 1

# Custom adapter
ACCOUNT_ADAPTER = "users.adapters.CustomAccountAdapter"

# Email confirmation redirect URLs
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = (
    f"{os.getenv('FRONTEND_URL', 'http://localhost:3000')}/verify-email/"
)
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (
    f"{os.getenv('FRONTEND_URL', 'http://localhost:3000')}/login/"
)

FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "users.serializers.CustomRegisterSerializer",
}


# Email verification settings
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 0.0005  # 1

# Pipeline service settings

# Comma-separated list of allowed IPs. If the variable is empty or not set, allow all IPs.
pipeline_ips = os.getenv("PIPELINE_SERVICE_IPS", "")
PIPELINE_SERVICE_IPS = pipeline_ips.strip().split(",") if pipeline_ips else None
PIPELINE_BASE_URL = "http://localhost:8001"
PIPELINE_TIMEOUT = 30  # seconds
